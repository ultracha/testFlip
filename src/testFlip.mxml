<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
						xmlns:mx="library://ns.adobe.com/flex/mx"
						xmlns:filters="flash.filters.*"
						xmlns:rs="com.rubenswieringa.book.*"
						creationComplete="onCreationComplete()"
						layout="absolute" windowComplete="goFullScreen()"
						showStatusBar="false"
						height="900" width="1440">



	
	<fx:Script>
		<![CDATA[
			import com.rubenswieringa.book.Book;
			import com.rubenswieringa.book.BookEvent;
			import com.rubenswieringa.book.Page;
			
			import flash.filesystem.File;
			
			import mx.containers.Canvas;
			import mx.controls.Image;
			import mx.core.FlexGlobals;
			
			[Embed(source='assets/style/icons/hard1.swf')]
			private var hardBtnIcon1:Class;
			[Embed(source='assets/style/icons/hard2.swf')]
			private var hardBtnIcon2:Class;
			
			[Embed(source='assets/img/baduk/main_back.png')]
			private var bgImg:Class;
			[Embed(source='assets/img/baduk/main_outline.png')]
			private var bgOutlineImg:Class;
			
			
[Bindable]	private var tearBtnVisible:Boolean = false;
[Bindable]	private var hardBtnIcon:Class = hardBtnIcon1;
			
[Bindable]  private var application:Object = FlexGlobals.topLevelApplication;
									
			private var bgLoader:Loader;
			private var bgBitmapData:BitmapData;
			private var bgOutlineData:BitmapData;
			
			// for timer...
			private var timer:Timer;
			private var count:int;
			
			// 책장 Coord
			public var arrayX:Array = new Array(10);
			public var arrayY:Array = new Array(10);
			
			// book info
			public var bookCount:int;
			public var pageCountArray:Array = new Array(10);
			public var currentBook:int = 0;
			public var bookmode:Boolean = false;
			public var pagecount:int = 0;
			public var pagerealcount:int = 0;
			public var bTimer:Boolean = false;
			
			protected var pageArray:Array;
			protected var pagewidth:Number = 0;
			protected var pageheight:Number = 0;

			public var myBook:Book;
			private var bookBack:Image;// = new Image();
			private var backbtn:Image;// = new Image();
//			private var waiting:Image;
//			private var bgCanvas:Canvas;
			
			private function onCreationComplete ():void {
				
//				bookBack.source = "books/book_back.png";
//				backbtn.source = "books/back.png";

				arrayX[0] = 93; arrayX[1] = 380; arrayX[2] = 660; arrayX[3] = 940; arrayX[4] = 1220;
				arrayX[5] = 93; arrayX[6] = 380; arrayX[7] = 660; arrayX[8] = 940; arrayX[9] = 1220;
				arrayY[0] = 168; arrayY[1] = 168; arrayY[2] = 168; arrayY[3] = 168; arrayY[4] = 168;
				arrayY[5] = 498; arrayY[6] = 498; arrayY[7] = 498; arrayY[8] = 498; arrayY[9] = 498;

				this.addEventListener(MouseEvent.CLICK, MouseClickHandler);//this.startPageFlip);

				
			
			//	bgLoader = new Loader();
			//	bgLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, bgLoadingComplete, false, 0, true);
			//	bgLoader.load(new URLRequest(bgImagePath));
			//}
			
			//private function bgLoadingComplete(event:Event):void {
				var image:Bitmap = new bgImg();
				var image_outline:Bitmap = new bgOutlineImg();
				
				bgOutlineData = image_outline.bitmapData.clone();
				
				bgBitmapData = image.bitmapData.clone();
				bgBitmapData.draw(bgOutlineData, new Matrix(1,0,0,1, 47, 164));
				bgBitmapData.draw(bgOutlineData, new Matrix(1,0,0,1, 328, 164));
				bgBitmapData.draw(bgOutlineData, new Matrix(1,0,0,1, 608, 164));
				bgBitmapData.draw(bgOutlineData, new Matrix(1,0,0,1, 888, 164));
				bgBitmapData.draw(bgOutlineData, new Matrix(1,0,0,1, 1168, 164));
				bgBitmapData.draw(bgOutlineData, new Matrix(1,0,0,1, 47, 494));
				bgBitmapData.draw(bgOutlineData, new Matrix(1,0,0,1, 328, 494));
				bgBitmapData.draw(bgOutlineData, new Matrix(1,0,0,1, 608, 494));
				bgBitmapData.draw(bgOutlineData, new Matrix(1,0,0,1, 888, 494));
				bgBitmapData.draw(bgOutlineData, new Matrix(1,0,0,1, 1168, 494));

				// Book 정보를 가져온다.
				loadXMLInfo();
				
				bgCanvas.graphics.beginBitmapFill(bgBitmapData);
				bgCanvas.graphics.drawRect(0, 0, 1440, 900);//stage.stageWidth, stage.stageHeight);
				bgCanvas.graphics.endFill();	

//				bgCanvas.graphics.beginBitmapFill(bgOutlineData);
//				bgCanvas.graphics.draw
//				bgCanvas.graphics.drawRect(0, 0, 232, 192);
//				bgCanvas.graphics.endFill();
				
//				count = 0;
				timer = new Timer(100);
				timer.addEventListener(TimerEvent.TIMER, onTimer);
				timer.start();
				
			}
			
			public function MouseClickHandler(event:MouseEvent):void{
				// 책 위에 click 되었는지 여부 확인
				
				if (bookmode) return;
				
				var maxx:int = arrayX[bookCount-1] + 130;
				var maxy:int = arrayY[bookCount -1] + 184;
				
				var idx:int = -1;
				var localX:int = event.localX;
				var localY:int = event.localY;
				if (localX > maxx || localY > maxy) return;
				if (localX < arrayX[0] || localY < arrayY[0]) return;
				
				
				for (var i:int = 0; i < 10; i++)
				{
					if (
						(localX >= arrayX[i] && localX < arrayX[i] + 130) &&
						(localY >= arrayY[i] && localY < arrayY[i] + 184))
					{
						idx = i;
						break;
					}
				}
		 		trace (idx);
				currentBook = idx;
				// Scene 변환...
				loadScene();
			}
			
			private function loadXMLInfo():void {
				var loader:URLLoader = new URLLoader();
				//                                        loader.dataFormat = DataFormat .TEXT;
				loader.addEventListener(Event.COMPLETE, completeHandler);
				loader.load(new URLRequest("books/books.xml"));
			}
			
			public function completeHandler(event:Event):void{
				try{
					var data:XML = new XML(event.target.data);
					trace("------------------------< 파싱전 >------------------------");
					trace(data);
					bookCount = getItemValue(data, 0);
					
					for (var i:int = 0; i < bookCount; i++)
					{
						pageCountArray[i] = getItemValue(data, i + 2);
					}
					
//					getTreeItemsByFolderType(data, "count");
					trace("------------------------< 파싱후 >------------------------");
					trace(bookCount);
				}catch(error:TypeError){
					trace("텍스트를 XML로 변하지 못하였습니다.");
					trace(error.message);
				}
				
				//bgBitmapData.draw(bgLoader);
				
				// book image load...
				if (bookCount != 0){
					for (var i:int = 0; i<bookCount; i++)
					{
						var item:Image = new Image();
						if (i + 1 != 10){
							var str:String = "books/0" + (i+1) + "/001.jpg";
							item.source = "books/0" + (i+1) + "/001.jpg";
						}
						else { // 10번째의 경우
							item.source = "books/"+(i+1) +"/001.jpg";
						}				
						//item.width = 130;
//						item.height = 182;//184;
						item.addEventListener(Event.COMPLETE, imgloadComplete);
						item.load();
						
//						addChild(item);
//						var bdata:Bitmap = item.content as Bitmap;
//						bgBitmapData.draw(bdata.bitmapData, new Matrix(1,0,0,1, 51, 168));	
					}			
				}				
			}
			
			public function imgloadComplete(event:Event):void{
				
				if (event.target.content == null) return;
				
				var idx:Number;
				var bookidx:String = event.target.source;
				var bdata:Bitmap = event.target.content as Bitmap;
				var scale:Number = 182 / bdata.bitmapData.height; //0.075;
				var matrix:Matrix = new Matrix();//1,0,0,1, 51 + (51 - (51 * 0.07)), 168);
				matrix.scale(scale, scale);
				
				var bTmpData:BitmapData = new BitmapData(bdata.bitmapData.width * scale, bdata.bitmapData.height * scale);
				bTmpData.draw(bdata.bitmapData, matrix);			
				
				var tmpstr:String = bookidx.substr(6, 2);
				idx = parseInt(tmpstr);
				bgBitmapData.draw(bTmpData, new Matrix(1,0,0,1, arrayX[idx -1], arrayY[idx -1]));	
				
			}
			public static function getItemValue(data:XML, idx:int):int{
				var attribute:XMLList = data.children();
				
				trace(attribute);//.@[attributeName]);
				trace(attribute[idx]);
				//trace(attribute.count);
				return parseInt(attribute[idx], 10);
			}
			public static function getTreeItemsByFolderType(data:XML, attributeName:String, attributeValue:String):void
			{
				var attributes:XMLList = data.children();
				for(var i:int = attributes.length()-1; i>=0; i--)
				{
					if(attributes[i].@[attributeName] != attributeValue)
					{
						delete attributes[i];
					}
				}
				
			}
			private function onTimer(evt:TimerEvent):void {
				
				if (bTimer == false) return;
				if (pagecount + 1 == pageCountArray[currentBook] || pagecount == pagerealcount)
				{
					var scale:Number = 900 / pageheight;
					myBook = new Book();
					//x="184" y="0" width="1552" height="1200" 
					//				openAt="0" autoFlipDuration="10" easing="0.7" regionSize="150"
					//				sideFlip="true" hardCover="true" hover="true" snap="false" flipOnClick="true">
					myBook.x = (1440 - ((pagewidth * scale) * 2)) / 2; //125;//159;
					myBook.y = 0;
					myBook.width = (pagewidth * scale) * 2;//1122;
					myBook.height = 900;
					myBook.openAt = 0;
					myBook.autoFlipDuration = 10;
					myBook.easing = 0.7;
					myBook.regionSize = 500;//150;
					myBook.sideFlip = true;
					myBook.hardCover = true;
					myBook.hover = true;
					myBook.snap = false;
					myBook.flipOnClick = true;
					
					for (var i:int = 0; i <= pagecount - 1; i++)// pageCountArray[currentBook]; i++)
					{
						myBook.addChild(pageArray[i]);
					}
					myBook.setCurrentPage(0);
					addChild(myBook);
					
					myBook.addEventListener(BookEvent.PAGE_TORN, onPageTorn);
					delete pageArray[pageCountArray[currentBook]];
					//while (pageArray.length > 0) pageArray.shift();
					bTimer = false;
					pagewidth = 0;
					pageheight = 0;
//					this.removeChild(waiting);
				}
			}			

			private function goFullScreen():void{
			
				//if($fullScreen){
					this.stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
					this.stage.scaleMode = StageScaleMode.NO_SCALE;// .NO_SCALE;// .EXACT_FIT; 
			
				//} else {
				//	this.stage.displayState = StageDisplayState.NORMAL;
				//}
			}
			
			private function onPageTorn (event:BookEvent):void {
//				if (myBook.pages.getItemIndex(tearablePage1) == -1){
//					tearBtnVisible = true;
//				}
			}
			
		 	private function addTearable ():void {
//				myBook.addChildAt(tearablePage2, 10);
//				myBook.addChildAt(tearablePage1, 10);
			}
			
			private function toggleHard (page:Page):void {
//				hard_btn.toolTip = (page.hard) ? "make next page hard" : "make next page fluid";
//				hardBtnIcon = (page.hard) ? hardBtnIcon1 : hardBtnIcon2;
//				page.hard = !page.hard;
//				hard_btn.invalidateDisplayList();
			}
			public function onBack(event:MouseEvent):void{
				// back to title...
//				bTimer = true;
				myBook.removeAllChildren();
				this.removeChild(bookBack);
				backbtn.removeEventListener(MouseEvent.CLICK, onBack);
				this.removeChild(backbtn);
				this.removeChild(myBook);
				
				this.addEventListener(MouseEvent.CLICK, MouseClickHandler);
				bookmode = false;
			}
			
			public function loadScene():void {
		
				var appPath:File = File.applicationDirectory;
				
				pagecount = 0;
				pagerealcount = 0;
				bookmode = true;
				
				bookBack = new Image();
				backbtn = new Image();
//				waiting = new Image();
				//			private var bgCanvas:Canvas;
				bookBack.source = "books/book_back.png";
				backbtn.source = "books/back.png";
//				waiting.source = "books/waiting.png";
				
				
				backbtn.x = 1306;
				backbtn.y = 768;

				this.removeEventListener(MouseEvent.CLICK, MouseClickHandler);//this.startPageFlip);
				backbtn.addEventListener(MouseEvent.CLICK, onBack);
				
//				waiting.x = (1440 / 2) - (525 /2);
//				waiting.y = (900 / 2) - (201 / 2);
				
				this.addChild(bookBack);
				this.addChild(backbtn);
//				this.addChild(waiting);
				
				
				pageArray = new Array(pageCountArray[currentBook]);
				
				
				for (var i:int = 0; i < pageCountArray[currentBook]; i++, pagerealcount++)
				{
					try {
//					var page1:Page = new Page();
					var item1:Image = new Image();
					var tmpStr:String;
					
					if (currentBook + 1 == 10) {
						tmpStr = "books/10/";
					} else {
						tmpStr = "books/0" + (currentBook + 1) + "/";
					}
					if (i + 1 < 10) {
						item1.source = tmpStr + "00" + (i + 1) + ".jpg"; 
					}
					else if (i+1 < 100) {
						item1.source = tmpStr + "0" + (i + 1) + ".jpg"; 						
					}
					else {
						item1.source = tmpStr + (i + 1)  + ".jpg";
					}

					var strFilePath:String = appPath.nativePath + "/" + item1.source;//"/books/01/01.jpg";
					var imgFile:File = new File(strFilePath);
					if (imgFile.exists == false)
					{
						bTimer = true;
						break;
					}
//					item1.width = 565;
					item1.height = 900;
//					var scale:Number = item1.height / 900;
//					item1.scaleX = scale;
//					item1.scaleY = scale;

					item1.addEventListener(Event.COMPLETE, onAddPage);	
				
					
						item1.load();
					}catch (error:TypeError){
				
						bTimer = true;
						break;
					}
				}
				bTimer = true;
								
				//				bgCanvas.addChild(myBook);
				
			}
			
			public function onAddPage(event:Event):void{

				if (event.target != null)
				{
					var page1:Page = new Page();
					page1.addChild(event.target as Image);
//				if (page1.height != 0)
//				{
//					var scale:Number = (900 / page1.height);
//					page1.scaleX = scale;
//					page1.scaleY = scale;
//				}
				
					var idx:int = 0;
					var tmpstr:String = event.target.source.substr(9, 3);
					idx = parseInt(tmpstr);
				
					pageArray[idx - 1] = page1;
					trace (event.target.source);
					trace(event.target.getBounds(page1)); 
					var rect:Rectangle = event.target.getBounds(page1);
					if (pagewidth == 0)
					{
						pagewidth = rect.width;
						pageheight = rect.height;
					}
					else if (pagewidth > rect.width)
					{
						pagewidth = rect.width;
						pageheight = rect.height;
					}
					//pagewidth = page1. .width;
					
				}
//				myBook.addChild(page1);				
				
/*				if (pagecount + 1 == pageCountArray[currentBook] || event.target == null)
				{
					myBook = new Book();
					//x="184" y="0" width="1552" height="1200" 
					//				openAt="0" autoFlipDuration="10" easing="0.7" regionSize="150"
					//				sideFlip="true" hardCover="true" hover="true" snap="false" flipOnClick="true">
					myBook.x = 159;
					myBook.y = 0;
					myBook.width = 1122;
					myBook.height = 900;
					myBook.openAt = 0;
					myBook.autoFlipDuration = 10;
					myBook.easing = 0.7;
					myBook.regionSize = 150;
					myBook.sideFlip = true;
					myBook.hardCover = true;
					myBook.hover = true;
					myBook.snap = false;
					myBook.flipOnClick = true;
	
					for (var i:int = 0; i <= pagecount; i++)// pageCountArray[currentBook]; i++)
					{
						myBook.addChild(pageArray[i]);
					}
					myBook.setCurrentPage(0);
					addChild(myBook);
					
					myBook.addEventListener(BookEvent.PAGE_TORN, onPageTorn);
					delete pageArray[pageCountArray[currentBook]];
					//while (pageArray.length > 0) pageArray.shift();

				}
				else {
					pagecount++;
				}
					*/
				pagecount++;
			}
			
		]]>
	</fx:Script>
	
	<mx:Canvas id="bgCanvas" height="900" width="1440" />

	
</mx:WindowedApplication>